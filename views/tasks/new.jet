{{ extends "../pages/task" }}

{{block documentBody()}}

<div class="breadcrumbs text-sm mb-4">
    <ul>
        <li><a href="/view">Home</a></li>
        <li><a href="/view/tasks">Tasks</a></li>
        <li>New</li>
    </ul>
</div>

<div x-data="taskForm()" class="space-y-6">

    <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-bold">New Task</h2>
    </div>

    <form id="newTaskForm" class="space-y-6 rounded-box border p-4">
        <!-- Step 1 -->
        <fieldset x-show="step === 1" x-cloak x-transition class="fieldset bg-base-200 rounded-box border p-4">
            <legend class="fieldset-legend">1. Slack Configuration</legend>

            <div class="form-control w-full mb-4">
                <label class="label font-semibold text-md mb-2" for="bot_token">Bot Token</label>
                <input type="text" id="bot_token" name="bot_token" x-ref="bot_token" class="input input-bordered w-full p-2">
                <template x-if="errors.bot_token">
                    <p class="text-red-500 text-sm mt-1" x-text="errors.bot_token"></p>
                </template>
            </div>

            <div class="form-control w-full mb-4">
                <label class="label font-semibold text-md mb-2" for="chat_id">Channel/Chat ID</label>
                <input type="text" id="chat_id" name="chat_id" x-ref="chat_id" class="input input-bordered w-full p-2">
                <template x-if="errors.chat_id">
                    <p class="text-red-500 text-sm mt-1" x-text="errors.chat_id"></p>
                </template>
            </div>

            <div class="flex justify-end">
                <button type="button" class="btn btn-primary" @click="validateStep1()">Next</button>
            </div>
        </fieldset>

        <!-- Step 2 -->
        <fieldset x-show="step === 2" x-cloak x-transition class="fieldset bg-base-200 rounded-box border p-4">
            <legend class="fieldset-legend">2. Task Information</legend>

            <div class="form-control w-full mb-4">
                <label class="label font-semibold text-md mb-2" for="name">Name</label>
                <input type="text" id="name" name="name" x-ref="name" class="input input-bordered w-full p-2">
                <template x-if="errors.name">
                    <p class="text-red-500 text-sm mt-1" x-text="errors.name"></p>
                </template>
            </div>

            <div class="form-control w-full mb-4">
                <label class="label font-semibold text-md mb-2" for="message">Message</label>
                <textarea id="message" name="message" x-ref="message" class="textarea textarea-bordered w-full p-2" rows="4"></textarea>
                <template x-if="errors.message">
                    <p class="text-red-500 text-sm mt-1" x-text="errors.message"></p>
                </template>
            </div>

            <div class="form-control w-full mb-4">
                <label class="label font-semibold text-md mb-2">When to execute</label>

                <!-- Every -->
                <div class="flex items-center space-x-2 mb-2">
                    <input type="radio" name="execute_mode" value="every" class="radio radio-xs" x-model="mode">
                    <span>Every</span>
                    <select id="every_interval" name="execute" x-ref="every_interval" class="select select-bordered ml-2" :disabled="mode !== 'every'">
                        <option disabled selected value="">Choose an interval</option>
                        <option value="*/1 * * * * *">Every 1 second</option>
                        <option value="*/5 * * * * *">Every 5 seconds</option>
                        <option value="0 * * * *">Every hour</option>
                        <option value="0 0 * * *">Every day</option>
                    </select>
                </div>

                <!-- Cron -->
                <div class="flex items-start space-x-2 mb-2">
                    <input type="radio" name="execute_mode" value="cron" class="radio radio-xs" x-model="mode">
                    <div class="w-full">
                        <span>Cron expression:</span>
                        <input type="text" id="cron_expression" name="execute" x-ref="cron_expression" class="input input-bordered w-full mt-1"
                            placeholder="e.g., */5 * * * *" :disabled="mode !== 'cron'">
                        <a href="#" class="text-blue-400 text-sm mt-1 inline-block">Examples</a>
                    </div>
                </div>

                <template x-if="errors.execute">
                    <p class="text-red-500 text-sm mt-1" x-text="errors.execute"></p>
                </template>
            </div>

            <div class="form-control w-full mb-4">
                <label class="label font-semibold text-md mb-2">Timezone <span class="text-gray-500">(Optional)</span></label>
                <div class="flex items-start space-x-2 mb-2">
                    <input type="radio" name="timezone" value="asia/bangkok" class="radio radio-xs" checked>
                    <div class="w-full">
                        <span>Default timezone of your account (Asia/Bangkok)</span>
                    </div>
                </div>
            </div>

            <div class="flex justify-between mt-4">
                <button type="button" class="btn" @click="step = 1">Back</button>
                <button type="button" class="btn btn-primary" :disabled="isLoading" @click="validateAndSubmit()">
                    <span x-text="isLoading ? 'Creating...' : 'Create'"></span>
                </button>
            </div>

        </fieldset>
    </form>
</div>

<script>
window.taskForm = function () {
    return {
        step: 1,
        mode: "every",
        errors: {},
        isLoading: false,

        validateStep1() {
            this.errors = {};

            if (!this.$refs.bot_token.value.trim()) {
                this.errors.bot_token = "Bot token is required";
            }

            if (!this.$refs.chat_id.value.trim()) {
                this.errors.chat_id = "Chat ID is required";
            }

            if (Object.keys(this.errors).length === 0) {
                this.step = 2;
            }
        },

        async validateAndSubmit() {
            this.errors = {};

            const bot_token = this.$refs.bot_token.value.trim();
            const chat_id = this.$refs.chat_id.value.trim();
            const name = this.$refs.name.value.trim();
            const message = this.$refs.message.value.trim();
            const execute = this.mode === 'every'
                ? this.$refs.every_interval.value
                : this.$refs.cron_expression.value;

            if (!name) this.errors.name = "Name is required";
            if (!message) this.errors.message = "Message is required";
            if (!execute) this.errors.execute = "Execution time is required";

            if (Object.keys(this.errors).length > 0) return;

            this.isLoading = true;

            try {
                const res1 = await fetch("/api/v1/slacks", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        bot_token,
                        chat_id,
                    }),
                });

                if (!res1.ok) {
                    const err1 = await res1.json();
                    throw new Error(err1.message || "Failed to create Slack config");
                }

                const slackConfig = await res1.json();
                const slack_config_id = slackConfig.id;

                const res2 = await fetch("/api/v1/tasks", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        name,
                        message,
                        execute,
                        mode: this.mode,
                        slack_config_id,
                    }),
                });

                if (!res2.ok) {
                    const err2 = await res2.json();
                    throw new Error(err2.message || "Failed to create task");
                }

                window.location.href = "/view/tasks";
            } catch (err) {
                alert(err.message || "Something went wrong");
            } finally {
                this.isLoading = false;
            }
        }
    };
}
</script>

{{end}}
